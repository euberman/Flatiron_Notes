      //   <button onClick={this.addToStart.bind(this)}> Add New to Start </button>
      sortByEarliest() {
        const sortedList = this.state.list.sort((a, b) => {
          return a.createdAt - b.createdAt;
        });
        this.setState({
          list: [...sortedList],
        });
      }

      // <button onClick={this.addToEnd.bind(this)}> Add New to End </button>
      sortByLatest() {
        const sortedList = this.state.list.sort((a, b) => {
          return b.createdAt - a.createdAt;
        });
        this.setState({
          list: [...sortedList],
        });
      }

      // <button onClick={this.sortByEarliest.bind(this)}> Sort by Earliest </button>
      addToEnd() {
        const date = new Date();
        const nextId = this.state.toDoCounter + 1;
        const newList = [
          ...this.state.list,
          {id: nextId, createdAt: date},
        ];
        this.setState({
          list: newList,
          toDoCounter: nextId,
        });
      }

      //<button onClick={this.sortByLatest.bind(this)}> Sort by Latest </button>
      addToStart() {
        const date = new Date();
        const nextId = this.state.toDoCounter + 1;
        const newList = [
          {id: nextId, createdAt: date},
          ...this.state.list,
        ];
        this.setState({
          list: newList,
          toDoCounter: nextId,
        });
      }

//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
//  _____________________________________________________________________________________
